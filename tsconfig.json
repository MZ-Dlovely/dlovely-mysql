{
  "compilerOptions": {
    /* 基本选择 */
    "target": "esnext",                       /* 指定ECMAScript目标版本: 'ES3' (默认), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */
    "module": "commonjs",                     /* 指定模块代码生成: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "lib": ["esnext","dom"],                  /* 指定要包含在编译中的库文件 */
    "allowJs": true,                          /* 指定要包含在编译中的库文件 */
    "checkJs": true,                          /* 允许在'.js'文件中报告错误 */
    "jsx": "preserve",                        /* 指定jsx代码生成: 'preserve', 'react-native', or 'react'. */
    "declaration": true,                      /* 生成相应的'.d.ts'文件 */
    // "sourceMap": true,                     /* 生成相应的'.map'文件 */
    // "outFile": "./",                       /* 将输出连接并发送到单个文件 */
    "outDir": "./lib",                        /* 将输出结构重定向到目录 */
    "rootDir": "./src",                       /* 指定输入文件的根目录,用于使用--outDir控制输出目录结构 */
    "removeComments": true,                   /* 不要输出注释 */
    "noEmit": false,                          /* 不发射输出 */
    // "incremental": true,                   /* 启用增量编译 */
    // "importHelpers": true,                 /* 从'tslib'导入发射帮助程序 */
    // "downlevelIteration": true,            /* 针对'ES5'或'ES3'时，在'for of'、'spread'和'destructuring'中提供对iterables的全面支持 */
    "isolatedModules": true,                  /* 将每个文件作为单独的模块进行传输(类似于'ts.transpileModule') */

    /* 严格类型检查选项 */
    "strict": true,                           /* 启用所有严格类型检查选项 */
    // "noImplicitAny": true,                 /* 对隐含'any'类型的表达式和声明引发错误 */
    // "strictNullChecks": true,              /* 启用严格的空检查 */
    // "strictFunctionTypes": true,           /* 启用对函数类型的严格检查 */
    // "strictPropertyInitialization": true,  /* 启用类中属性初始化的严格检查 */
    // "noImplicitThis": true,                /* 对隐含'any'类型的'this'表达式引发错误。 */
    // "alwaysStrict": true,                  /* 在严格模式下解析并为每个源文件发出'use strict' */

    /* 附加检查 */
    "noUnusedLocals": true,                   /* 报告未使用的局部变量的错误 */
    "noUnusedParameters": true,               /* 报告未使用参数的错误 */
    "noImplicitReturns": true,                /* 函数中并非所有代码路径都返回值时报告错误。 */
    "noFallthroughCasesInSwitch": true,       /* 在switch语句中报告故障案例的错误 */

    /* 模块分析选项 */
    "moduleResolution": "node",               /* 指定模块解析策略: 'node' (Node.js) 或 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "src",                      /* 用于解析非绝对模块名称的基本目录 */
    // "paths": {},                           /* 将导入重新映射到相对于'baseUrl'的查找位置的一系列条目 */
    // "rootDirs": [],                        /* 运行时项目结构的根文件夹列表。 */
    // "typeRoots": [],                       /* 包含类型定义的文件夹列表。 */
    // "types": ["./env"],                    /* 要包含在编译中的类型声明文件。 */
    "allowSyntheticDefaultImports": true,     /* 允许从没有默认导出的模块进行默认导入(这不会影响代码的发出，只是类型检查) */
    "esModuleInterop": true,                  /* 通过为所有导入创建命名空间对象，实现CommonJS和ES模块之间的互操作性(Implies 'allowSyntheticDefaultImports') */
    // "preserveSymlinks": true,              /* 不要解析符号链接的实际路径。 */
    "skipLibCheck": true,                     /* 跳过声明文件的类型检查。 */
    "resolveJsonModule": true,                /* 允许导入带有'.json'扩展的模块，这是节点项目中的常见做法。 */

    /* 源码选项 */
    // "sourceRoot": "./",                    /* 指定调试器应定位TypeScript文件而不是源位置的位置 */
    // "mapRoot": "./",                       /* 指定调试器应定位映射文件的位置，而不是生成的位置 */
    // "inlineSourceMap": true,               /* 发射带有源贴图的单个文件，而不是单独的文件 */
    // "inlineSources": true,                 /* 在单个文件中沿sourcemaps发射源,需要设置'--inlineSourceMap'或'--sourceMap' */

    /* 实验性选项 */
    "experimentalDecorators": true,           /* 启用对ES7装饰器的实验性支持。 */
    "emitDecoratorMetadata": true,            /* 启用对为装饰器发出类型元数据的实验性支持 */
  },
  "include": ["src/**/*.ts", "src/**/*.d.ts", "env.d.ts", "src/index.ts"]
}
